#!/usr/bin/env node

const canboatjs = require('../index')
const Parser = require('../index').FromPgn
const { parseCanId } = require('../lib/canId')
const socketcan = require('socketcan')

var parser = new canboatjs.FromPgn()


const argv = require('minimist')(process.argv.slice(2), {
  alias: { h: 'help' }
})

if ( argv['help'] ) {
  console.error(`Usage: ${process.argv[0]} [options] candevice

Options:
  -h, --help       output usage information`)
  process.exit(1)
}

if ( argv['_'].length === 0 ) {
  console.error('Please specify a device')
  process.exit(1)
}

/*

let messageCb = (data) => {
  let jsonData = parser.parse(data, (err) => { if ( err ) console.error(err) })
  if ( jsonData ) {
    console.log(data)
  }
}

let simpleCan = new canboatjs.SimpleCan({
  canDevice: argv['_'][0],
  preferredAddress: 35,
  disableDefaultTransmitPGNs: true,
  transmitPGNs: [],
}, messageCb)

simpleCan.start()

*/

parser.on('error', (pgn, error) => {
  console.error(`Error parsing ${pgn.pgn} ${error}`)
  console.error(error.stack)
})

parser.on('pgn', (pgn) => {
  console.log(JSON.stringify(pgn))
})


const canDevice = argv['_'][0]

const channel = socketcan.createRawChannel(canDevice);

channel.addListener('onStopped', (msg) => {
  console.error('socketcan stopped')
})

channel.addListener('onMessage', (msg) => {
  var pgn = parseCanId(msg.id)
  
  pgn.timestamp = new Date().toISOString()

  let sourceString = binToActisense(pgn, msg.data, msg.data.length)
  
  parser.parse({ pgn, length: msg.data.length, data: msg.data, sourceString })
})

channel.start()


function binToActisense(pgn, data, length) {
  return (
    pgn.timestamp +
      `,${pgn.prio},${pgn.pgn},${pgn.src},${pgn.dst},${length},` +
      new Uint32Array(data)
      .reduce(function(acc, i) {
        acc.push(i.toString(16));
        return acc;
      }, [])
      .map(x => (x.length === 1 ? "0" + x : x))
      .join(",")
  );
}
